import sys
import telebot
from telebot import types
import psycopg2
from design import Ui_MainWindow
from PyQt5.QtCore import QObject, pyqtSignal
import threading





class BusBot(QObject):
    message_signal = pyqtSignal(str, str)
    message_route_name_signal = pyqtSignal(str, str)
    message_end_route_signal = pyqtSignal(str, str)
    message_check_repair_signal = pyqtSignal(str, str)
    def __init__(self):
        super().__init__()
        self.conn = psycopg2.connect(
        host = 'localhost',
        database = 'buspark',
        user = 'postgres',
        password = 'myhicursed',
        port = '5432'
        )

        self.bot = telebot.TeleBot('7755694735:AAFuwcul-QlD8D8B1N44AeB0V7ybh1NAdjI')
        self.user_data = {}

        self.setup_handlers()


    def run(self):
        self.bot.polling(none_stop=True)

    def setup_handlers(self):
        @self.bot.message_handler(commands=['start'])
        def start(message):
            self.start(message)
        
        @self.bot.message_handler(func=lambda message: message.text == 'üëã –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è')
        def auth_start(message):
            self.handle_auth_start(message)
        
        @self.bot.message_handler(func=lambda message: True)
        def all_messages(message):
            self.handle_message(message)

    def start(self, message):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("üëã –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
        markup.add(btn1)
        self.bot.send_message(message.from_user.id, "–ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å", reply_markup=markup)

    def handle_auth_start(self, message):
        msg = self.bot.send_message(message.from_user.id, '‚ùì –õ–æ–≥–∏–Ω')
        self.bot.register_next_step_handler(msg, self.get_password)
            
    def handle_message(self, message):
        if message.text == '–°–æ–æ–±—â–∏—Ç—å –æ –î–¢–üüíÄ':
            msg = self.bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–±—É—Å–∞")
            self.bot.register_next_step_handler(msg, self.SendMessageToDispatcher)
        if message.text == '–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫üìä':
            cursor = self.conn.cursor()
            cursor.execute(" SELECT route_name, bus_number, route_start, route_finally, route_time FROM orders;")
            rows = cursor.fetchall()
            response = '–ë–ª–∏–∂–∞–π—à–∏–µ —Ä–µ–π—Å—ã: \n'
            for row in rows:
                response += f'–†–µ–π—Å #{row[1]}.\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑: {row[2]}.\n–ü—Ä–∏–±—ã—Ç–∏–µ –≤: {row[3]}\n–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –≤ –ø—É—Ç–∏: {row[4]} \n'
            self.bot.send_message(message.chat.id, response)
        if message.text == '–ù–∞—á–∞—Ç—å —Å–º–µ–Ω—Éüöç':
            msg = self.bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–±—É—Å–∞")
            self.bot.register_next_step_handler(msg, self.StartRouteName)
        if message.text == '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—ÉüôÖ':
            msg = self.bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–±—É—Å–∞")
            self.bot.register_next_step_handler(msg, self.EndRoute)
        if message.text == '–°–æ–æ–±—â–∏—Ç—å –æ –ø–æ–ª–æ–º–∫–µüíÅ‚Äç‚ôÄÔ∏è':
            msg = self.bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–±—É—Å–∞")
            self.bot.register_next_step_handler(msg, self.CheckRepair)
    

    def Accept(self, tg_id, msg):
        print(f'–ü—Ä–∏–Ω—è—Ç tg_id {tg_id}')
        self.bot.send_message(tg_id, msg)

    def CheckRepair(self, message):
        number = message.text
        curr = str(message.chat.id)
        self.message_check_repair_signal.emit(curr, number)
        self.bot.send_message(message.chat.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É.")

    def EndRoute(self, message):
        number = message.text
        curr = str(message.chat.id)
        self.message_end_route_signal.emit(curr, number)
        self.bot.send_message(message.chat.id, "–•–æ—Ä–æ—à–µ–≥–æ –æ—Ç–¥—ã—Ö–∞!")
    
    #def StartRoute(self, message):
    #    number = message.text
    #    msg = self.bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –í–∞—à–µ –∏–º—è")
    #    self.bot.register_next_step_handler(msg, self.StartRouteName, number)
    
    def StartRouteName(self, message):
        msg = message.text
        curr = str(message.chat.id)
        self.message_route_name_signal.emit(curr, msg)
        self.bot.send_message(message.chat.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É.\n–•–æ—Ä–æ—à–µ–π —Å–º–µ–Ω—ã!")


    def SendMessageToDispatcher(self, message):
        number = message.text
        curr = str(message.chat.id)
        self.message_signal.emit(curr, number)
        self.bot.send_message(message.chat.id, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ, —Å–∫–æ—Ä–æ —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä")
            

    def get_password(self, message):
        login = message.text
        msg = self.bot.send_message(message.chat.id, f'–õ–æ–≥–∏–Ω: {login}\n‚ùì –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å')
        self.bot.register_next_step_handler(msg, self.check_auth, login)

    def check_auth(self, message, login):
        try:
            print(message.chat.id)
            password = message.text
            cursor = self.conn.cursor()
            cursor.execute(" SELECT drivers_password FROM drivers WHERE drivers_login = %s ",
                        (login, ))
            db_password = cursor.fetchall()[0][0]
            cursor.execute(" SELECT drivers_login FROM drivers WHERE drivers_password = %s ",
                        (password, ))
            db_login = cursor.fetchall()[0][0]
            if login == db_login and password == db_password:
                cursor.execute("""
                    UPDATE drivers
                    SET telegram_id = %s
                    WHERE drivers_login = %s AND drivers_password = %s
                            """,
                    (message.chat.id, login, password))
                self.conn.commit()
                cursor.close()
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                btn1 = types.KeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫üìä')
                btn2 = types.KeyboardButton('–ù–∞—á–∞—Ç—å —Å–º–µ–Ω—Éüöç')
                btn3 = types.KeyboardButton('–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—ÉüôÖ')
                btn4 = types.KeyboardButton('–°–æ–æ–±—â–∏—Ç—å –æ –ø–æ–ª–æ–º–∫–µüíÅ‚Äç‚ôÄÔ∏è')
                btn5 = types.KeyboardButton('–°–æ–æ–±—â–∏—Ç—å –æ –î–¢–üüíÄ')
                markup.add(btn1, btn2, btn3, btn4, btn5)
                self.bot.send_message(message.chat.id, '‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!', reply_markup=markup)
            else:
                self.bot.send_message(message.chat.id, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å')
        except:
            self.bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å\n–ü–æ–ø—Ä–æ–±—É—Ç–µ –µ—â–µ —Ä–∞–∑(/start)")

#if __name__ == "__main__":
#    bus_bot = BusBot()
